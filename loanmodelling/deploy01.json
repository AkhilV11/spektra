{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "AzureUserName": {
      "type": "string"
    },
    "AzurePassword": {
      "type": "securestring"
    },
    "ODLID": {
      "type": "string"
    },
    "DeploymentID": {
      "type": "string"
    },
    "InstallCloudLabsShadow": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ]
    }
  },
  "variables": {
    "name": "loanmodel",
    "location": "[resourceGroup().location]",
    "sqlAdministratorLogin": "asa.sql.admin",
    "sqlAdministratorLoginPassword": "password.1!!",
    "workspaceName": "[concat('asaworkspace', parameters('DeploymentID'))]",
    "adlsStorageAccountName": "[concat('asadatalake', parameters('DeploymentID'))]",
    "defaultDataLakeStorageFilesystemName": "tempdata",
    "sqlComputeName": "SQLPool01",
    "sparkComputeName": "SparkPool01",
    "computeSubnetId": "",
    "sqlServerSKU": "DW100c",
    "storageBlobDataOwnerRoleID": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
    "defaultDataLakeStorageAccountUrl": "[concat('https://', variables('adlsStorageAccountName'), '.dfs.core.windows.net')]",
    "sparkAutoScaleEnabled": "false",
    "sparkMinNodeCount": "3",
    "sparkMaxNodeCount": "8",
    "sparkNodeCount": "3",
    "sparkNodeSizeFamily": "MemoryOptimized",
    "sparkNodeSize": "Small",
    "sparkAutoPauseEnabled": "true",
    "sparkAutoPauseDelayInMinutes": "15",
    "sparkVersion": "2.4",
    "keyVaultName": "[concat('asakeyvault', parameters('DeploymentID'))]",
    "blobStorageAccountName": "[concat('sbadata', parameters('DeploymentID'))]",
    "applicationInsightsName": "[concat('mlappinsights', parameters('DeploymentID'))]",
    "computevmsize": "Standard_D12_V2",
    "tenantId": "[subscription().tenantId]",
    "storageAccountName": "[concat('mlopstore',parameters('DeploymentID'))]",
    "keyVaultName": "[concat('sbadatakv',parameters('DeploymentID'))]",
    "applicationInsightsName": "[concat('sbadataai',parameters('DeploymentID'))]",
    "containerRegistryName": "[concat('mlacr',parameters('DeploymentID'))]",
    "workspaceName": "[concat('loanmodel',parameters('DeploymentID'))]",
    "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "keyVault": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
    "applicationInsights": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
    "containerRegistry": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
    "amlciName": "[concat(variables('name'), 'i', substring(uniqueString(resourceGroup().id),1,3))]",
    "amlccName": "[concat(variables('name'), 'c', substring(uniqueString(resourceGroup().id),1,3))]",
    "cloudlabsCommon": "[concat(' -AzureUserName ', parameters('AzureUserName'), ' -AzurePassword ', parameters('AzurePassword'), ' -AzureTenantID ', variables('AzureTenantID'), ' -AzureSubscriptionID ', variables('AzureSubscriptionID'), ' -ODLID ', parameters('ODLID'), ' -DeploymentID ', parameters('DeploymentID'),' -InstallCloudLabsShadow ', parameters('InstallCloudLabsShadow'))]",
    "AzureSubscriptionID": "[subscription().subscriptionId]",
    "AzureTenantID": "[subscription().tenantId]",
    "virtualNetworkName": "vNet",
    "vmNamePrefix": "jumpvm",
    "vmName": "[concat('JumpVM-',parameters('DeploymentID'))]",
    "virtualMachineSize": "Standard_DS2_v2",
    "networkInterfaceName": "[concat(variables('vmNamePrefix'), '-nic')]",
    "networkSecurityGroupName": "[concat(variables('vmNamePrefix'), '-nsg')]",
    "publicIpAddressName": "[concat(variables('vmNamePrefix'), '-pip')]",
    "publicIpAddressDNSName": "[concat(variables('vmNamePrefix'), parameters('DeploymentID'))]",
    "subnetName": "default",
    "location": "[resourceGroup().location]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/',variables('virtualNetworkName'), variables('subnetName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "name": "default",
      "apiVersion": "2019-10-01",
      "dependsOn": [],
      "properties": {
        "tags": {
          "DeploymentId": "[parameters('DeploymentID')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "name": "[variables('blobStorageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('adlsStorageAccountName')]",
      "location": "[variables('location')]",
      "dependsOn": [],
      "tags": {},
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": "true",
        "isHnsEnabled": "true",
        "largeFileSharesState": "Disabled"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "name": "[concat('default/', variables('defaultDataLakeStorageFilesystemName'))]",
          "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('adlsStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('adlsStorageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Synapse/workspaces",
      "apiVersion": "2019-06-01-preview",
      "name": "[variables('workspaceName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'), '/blobServices/default/containers/', variables('defaultDataLakeStorageFilesystemName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "defaultDataLakeStorage": {
          "accountUrl": "[variables('defaultDataLakeStorageAccountUrl')]",
          "filesystem": "[variables('defaultDataLakeStorageFilesystemName')]"
        },
        "virtualNetworkProfile": {
          "computeSubnetId": "[variables('computeSubnetId')]"
        },
        "sqlAdministratorLogin": "[variables('sqlAdministratorLogin')]",
        "sqlAdministratorLoginPassword": "[variables('sqlAdministratorLoginPassword')]"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2019-06-01-preview",
          "name": "allowAll",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "255.255.255.255"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Synapse/workspaces/bigDataPools",
      "apiVersion": "2019-06-01-preview",
      "name": "[concat(variables('workspaceName'), '/', variables('sparkComputeName'))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
      ],
      "properties": {
        "nodeCount": "[variables('sparkNodeCount')]",
        "nodeSizeFamily": "[variables('sparkNodeSizeFamily')]",
        "nodeSize": "[variables('sparkNodeSize')]",
        "autoScale": {
          "enabled": "[variables('sparkAutoScaleEnabled')]",
          "minNodeCount": "[variables('sparkMinNodeCount')]",
          "maxNodeCount": "[variables('sparkMaxNodeCount')]"
        },
        "autoPause": {
          "enabled": "[variables('sparkAutoPauseEnabled')]",
          "delayInMinutes": "[variables('sparkAutoPauseDelayInMinutes')]"
        },
        "sparkVersion": "[variables('sparkVersion')]"
      }
    },
    {
      "type": "Microsoft.Synapse/workspaces/sqlPools",
      "apiVersion": "2019-06-01-preview",
      "name": "[concat(variables('workspaceName'), '/', variables('sqlComputeName'))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]",
        "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'), '/bigDataPools/', variables('sparkComputeName'))]"
      ],
      "sku": {
        "name": "[variables('sqlServerSKU')]"
      },
      "properties": {
        "createMode": "Default",
        "collation": "SQL_Latin1_General_CP1_CI_AS"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-04-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[variables('location')]",
      "properties": {
        "tenantId": "[variables('tenantId')]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "accessPolicies": [],
        "enableSoftDelete": true
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "name": "[variables('containerRegistryName')]",
      "apiVersion": "2019-12-01-preview",
      "location": "[variables('location')]",
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2020-03-01",
      "identity": {
        "type": "systemAssigned"
      },
      "name": "[variables('workspaceName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[variables('storageAccount')]",
        "[variables('keyVault')]",
        "[variables('applicationInsights')]",
        "[variables('containerRegistry')]"
      ],
      "properties": {
        "friendlyName": "[variables('workspaceName')]",
        "storageAccount": "[variables('storageAccount')]",
        "keyVault": "[variables('keyVault')]",
        "applicationInsights": "[variables('applicationInsights')]",
        "containerRegistry": "[variables('containerRegistry')]"
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/computes",
      "name": "[concat(variables('workspaceName'), '/', variables('amlciName'))]",
      "apiVersion": "2021-07-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('workspaceName'))]"
      ],
      "properties": {
        "computeType": "ComputeInstance",
        "properties": {
          "vmSize": "[variables('computevmsize')]"
        }
      }
    },
    {
      "name": "[variables('vmName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-03-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": true,
            "provisionVmAgent": true
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "name": "[concat(variables('vmName'), '-osdisk')]",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmname'),'/extension')]",
      "apiVersion": "2019-07-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmname'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('blobStorageAccountName'))]",
        "[concat('Microsoft.MachineLearningServices/workspaces/',variables('workspaceName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://experienceazure.blob.core.windows.net/templates/cloudlabs-common/cloudlabs-windows-functions.ps1",
            "https://raw.githubusercontent.com/bhavangowdan/spektra/main/loanmodelling/psscript1.ps1"
          ],
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File psscript1.ps1', variables('cloudlabsCommon'))]"
        }
      }
    },
    {
      "name": "[variables('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-09-01",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('networkInterfaceName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-07-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "name": "[variables('publicIpAddressName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2019-07-01",
      "location": "[variables('location')]",
      "properties": {
        "publicIpAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('publicIpAddressDNSName'))]"
        }
      }
    },
    {
      "name": "[variables('networkSecurityGroupName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-07-01",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-rdp",
            "properties": {
              "priority": 1030,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "JumpVM DNS Name": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpAddressName'))).dnsSettings.fqdn]",
      "type": "string"
    },
    "JumpVM Admin Username": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "JumpVM Admin Password": {
      "type": "string",
      "value": "[parameters('adminPassword')]"
    },
    "DeploymentID": {
      "type": "string",
      "value": "[parameters('DeploymentID')]"
    }
  }
}
